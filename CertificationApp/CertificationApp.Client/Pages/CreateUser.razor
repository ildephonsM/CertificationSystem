@page "/create"
@using CertificationApp.Shared.Models
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms


<PageTitle>Create Certificate</PageTitle>

<div class="container-fluid">
    <div class="main-container">
        <div class="content-area">
            <NavLink href="/" class="back-btn" Match="NavLinkMatch.All">
                <i class="fas fa-arrow-left"></i> Back to Home
            </NavLink>

            <div class="form-container">
                <h2><i class="fas fa-plus-circle"></i> Create New Certificate</h2>
                <p class="text-muted mb-4">Enter the details for the new certification credential</p>

                <EditForm Model="User" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Name *</label>
                                <InputText @bind-Value="User.Name" class="form-control" placeholder="Enter first name" />
                                <ValidationMessage For="@(() => User.Name)" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Surname *</label>
                                <InputText @bind-Value="User.Surname" class="form-control" placeholder="Enter surname" />
                                <ValidationMessage For="@(() => User.Surname)" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">ID Number *</label>
                        <InputText @bind-Value="User.IdNumber" class="form-control" placeholder="Enter 13-digit ID number" />
                        <ValidationMessage For="@(() => User.IdNumber)" class="text-danger" />
                        @if (showDuplicateWarning)
                        {
                            <div class="text-warning mt-1">
                                <i class="fas fa-exclamation-triangle"></i> This ID number already exists in the system.
                            </div>
                        }
                    </div>

                    @* <div class="form-group">
                        <label class="form-label">Course Name *</label>
                        <InputText @bind-Value="User.CourseName" class="form-control" placeholder="Enter course name" />
                        <ValidationMessage For="@(() => User.CourseName)" class="text-danger" />
                    </div> *@

                    <div class="form-group">
                        <label class="form-label">Course Name *</label>
                        <InputSelect @bind-Value="User.CourseName" class="form-control">
                            <option value="">-- Select a course --</option>
                            @foreach (var course in courseList)
                            {
                                <option value="@course.CourseName">@course.CourseName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => User.CourseName)" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Date Completed *</label>
                        <InputDate @bind-Value="User.DateCompleted" class="form-control" />
                        <ValidationMessage For="@(() => User.DateCompleted)" class="text-danger" />
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <i class="fas fa-spinner fa-spin"></i>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <i class="fas fa-save"></i>
                                <span>Create User</span>
                            }
                        </button>
                        <button type="button" class="btn btn-outline-secondary ms-3" @onclick="ResetForm">
                            <i class="fas fa-undo"></i> Reset Form
                        </button>
                        <button type="button" class="btn btn-info ms-2" @onclick="ShowCertificateCount">
                            <i class="fas fa-info-circle"></i> Show Stats
                        </button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@if (showSuccessMessage)
{
    <div class="alert alert-success alert-dismissible fade show position-fixed" style="top: 20px; right: 20px; z-index: 1050;">
        <i class="fas fa-check-circle"></i> Certificate created successfully!
        <NavLink href="/history" class="btn btn-light btn-sm ms-2">View History</NavLink>
        <button type="button" class="btn-close" @onclick="() => showSuccessMessage = false"></button>
    </div>
}

@if (showErrorMessage)
{
    <div class="alert alert-danger alert-dismissible fade show position-fixed" style="top: 80px; right: 20px; z-index: 1050;">
        <i class="fas fa-exclamation-circle"></i> @errorMessage
        <button type="button" class="btn-close" @onclick="() => showErrorMessage = false"></button>
    </div>
}



<style>
    .main-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(15px);
        border-radius: 25px;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
        margin: 60px auto;
        max-width: 1300px;
        overflow: hidden;
        padding: 50px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .back-btn {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 50%, #000000 100%);
        border: none;
        color: white;
        padding: 12px 25px;
        border-radius: 12px;
        margin-bottom: 40px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        font-weight: 600;
        text-decoration: none;
        box-shadow: 0 4px 15px rgba(30, 60, 114, 0.3);
    }

        .back-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(30, 60, 114, 0.4);
            text-decoration: none;
        }

    .form-container {
        background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
        border-radius: 20px;
        padding: 50px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1), inset 0 1px 0 rgba(255, 255, 255, 0.6);
        border: 1px solid rgba(30, 60, 114, 0.1);
    }

        .form-container h2 {
            color: #1e3c72;
            margin-bottom: 10px;
            font-weight: 800;
            font-size: 2rem;
        }

    .form-group {
        margin-bottom: 30px;
    }

    .form-label {
        font-weight: 700;
        color: #1a1a1a;
        margin-bottom: 10px;
        display: block;
        font-size: 1rem;
        letter-spacing: 0.5px;
    }

    .form-control {
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 15px 20px;
        font-size: 1rem;
        transition: all 0.3s ease;
        width: 100%;
        background: #ffffff;
        font-weight: 500;
    }

        .form-control:focus {
            border-color: #2a5298;
            box-shadow: 0 0 0 0.3rem rgba(42, 82, 152, 0.15);
            outline: none;
            background: #ffffff;
            transform: translateY(-1px);
        }

    .btn-primary {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 50%, #000000 100%);
        border: none;
        padding: 15px 35px;
        border-radius: 12px;
        font-weight: 700;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        color: white;
        font-size: 1rem;
        text-decoration: none;
        box-shadow: 0 6px 20px rgba(30, 60, 114, 0.3);
    }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(30, 60, 114, 0.4);
            text-decoration: none;
        }

        .btn-primary:disabled {
            opacity: 0.6;
            transform: none;
            box-shadow: 0 2px 10px rgba(30, 60, 114, 0.2);
        }

    .btn-outline-secondary {
        border: 2px solid #1e3c72;
        color: #1e3c72;
        background: transparent;
        padding: 15px 35px;
        border-radius: 12px;
        font-weight: 700;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        font-size: 1rem;
        text-decoration: none;
    }

        .btn-outline-secondary:hover {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(30, 60, 114, 0.3);
            text-decoration: none;
        }

    .btn-info {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        border: none;
        color: white;
        padding: 15px 25px;
        border-radius: 12px;
        font-weight: 700;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        font-size: 1rem;
        box-shadow: 0 6px 20px rgba(23, 162, 184, 0.3);
    }

        .btn-info:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(23, 162, 184, 0.4);
            background: linear-gradient(135deg, #138496 0%, #0c6674 100%);
        }

    .text-danger {
        color: #dc3545 !important;
        font-size: 0.875rem;
        margin-top: 5px;
        font-weight: 500;
    }

    .text-warning {
        color: #f0ad4e !important;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .alert-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 12px;
    }

    .alert-danger {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 12px;
    }

    .btn-light {
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        font-weight: 600;
        text-decoration: none;
        border-radius: 6px;
        font-size: 0.85rem;
        padding: 4px 12px;
        transition: all 0.2s ease;
    }

        .btn-light:hover {
            background: rgba(255, 255, 255, 0.3);
            color: white;
            text-decoration: none;
            transform: translateY(-1px);
        }
</style>

@code {
    private CertificationApp.Shared.Models.CreateUser User { get; set; } = new();
    private List<CertificationApp.Shared.Models.Courses> courseList = new();

    private bool isSubmitting = false;
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;
    private bool showDuplicateWarning = false;
    private string errorMessage = string.Empty;

    // Use Async initialization to fetch courses
    protected override async Task OnInitializedAsync()
    {
        ResetForm();
        courseList = await Http.GetFromJsonAsync<List<CertificationApp.Shared.Models.Courses>>("api/Courses")
                     ?? new List<CertificationApp.Shared.Models.Courses>();
    } 

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        StateHasChanged();

        try
        {
            showDuplicateWarning = false;

            // Automatically set CreatedDate on submit
            User.CreatedDate = DateTime.Now;

            var response = await Http.PostAsJsonAsync("api/Certificates", User);

            if (response.IsSuccessStatusCode)
            {
                showSuccessMessage = true;
                ResetForm(); // Reset only user-input fields
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                if (error.Contains("already exists"))
                {
                    showDuplicateWarning = true;
                }
                ShowErrorMessage(error);
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Error saving user: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        User.Name = string.Empty;
        User.Surname = string.Empty;
        User.IdNumber = string.Empty;
        // User.CourseName = string.Empty;
        User.CourseName = string.Empty;
        User.DateCompleted = DateTime.Today;

        showErrorMessage = false;
        showDuplicateWarning = false;
        showSuccessMessage = false;

        StateHasChanged();
    }

    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
        showErrorMessage = true;
        showSuccessMessage = false;
    }

    private void ShowCertificateCount()
    {
        // Optional: implement statistics logic here
    }
}